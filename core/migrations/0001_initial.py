# Generated by Django 5.2.7 on 2025-10-05 07:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="QuantumUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "kyber_public_key",
                    models.BinaryField(
                        help_text="Kyber768 public key (raw bytes)", max_length=2048
                    ),
                ),
                (
                    "kyber_private_key",
                    models.BinaryField(
                        help_text="Kyber768 private key (raw bytes)", max_length=2048
                    ),
                ),
                (
                    "dilithium_public_key",
                    models.BinaryField(
                        help_text="Dilithium3 public key (raw bytes)", max_length=4096
                    ),
                ),
                (
                    "dilithium_private_key",
                    models.BinaryField(
                        help_text="Dilithium3 private key (raw bytes)", max_length=4096
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "quantum_users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="EncryptedFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "filename",
                    models.CharField(help_text="Display filename", max_length=255),
                ),
                (
                    "original_filename",
                    models.CharField(
                        help_text="Original uploaded filename", max_length=255
                    ),
                ),
                (
                    "file_path",
                    models.CharField(
                        help_text="Path to encrypted file on filesystem", max_length=500
                    ),
                ),
                (
                    "file_size",
                    models.BigIntegerField(help_text="Size of original file in bytes"),
                ),
                (
                    "mime_type",
                    models.CharField(
                        blank=True,
                        help_text="MIME type of original file",
                        max_length=100,
                    ),
                ),
                (
                    "aes_nonce",
                    models.BinaryField(
                        help_text="AES-GCM nonce (12 bytes)", max_length=16
                    ),
                ),
                (
                    "wrapped_keys",
                    models.JSONField(
                        help_text="JSON mapping user emails to their wrapped AES keys"
                    ),
                ),
                (
                    "metadata_signature",
                    models.BinaryField(
                        help_text="Dilithium3 signature of file metadata",
                        max_length=4096,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="uploaded_files",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "encrypted_files",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_email",
                    models.EmailField(
                        help_text="Email of user performing action", max_length=254
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("register", "User Registration"),
                            ("login", "User Login"),
                            ("logout", "User Logout"),
                            ("upload", "File Upload"),
                            ("download", "File Download"),
                            ("share", "File Share"),
                            ("access_granted", "Access Granted"),
                            ("access_denied", "Access Denied"),
                            ("key_generation", "Key Generation"),
                            ("signature_verification", "Signature Verification"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "details",
                    models.JSONField(
                        default=dict, help_text="Additional context and metadata"
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("success", models.BooleanField(default=True)),
                ("error_message", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.encryptedfile",
                    ),
                ),
            ],
            options={
                "db_table": "audit_logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user_email", "-timestamp"],
                        name="audit_logs_user_em_8b035e_idx",
                    ),
                    models.Index(
                        fields=["action", "-timestamp"],
                        name="audit_logs_action_f48619_idx",
                    ),
                    models.Index(
                        fields=["success", "-timestamp"],
                        name="audit_logs_success_4e6301_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FileAccess",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_email",
                    models.EmailField(
                        help_text="Email of user with access", max_length=254
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "file",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_records",
                        to="core.encryptedfile",
                    ),
                ),
                (
                    "granted_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="granted_access",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "file_access",
                "ordering": ["-created_at"],
                "unique_together": {("file", "user_email")},
            },
        ),
    ]
