# Generated by Django 4.2.17 on 2025-10-06 06:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0002_groupmembership_usergroup_groupmembership_group_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="OnlineStatus",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="online_status",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("is_online", models.BooleanField(default=False)),
                ("last_seen", models.DateTimeField(auto_now=True)),
                ("last_heartbeat", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "online statuses",
                "db_table": "online_status",
            },
        ),
        migrations.AlterField(
            model_name="quantumuser",
            name="kyber_private_key",
            field=models.BinaryField(
                blank=True,
                default=b"",
                help_text="Legacy Kyber768 private key (preserved for backward compatibility)",
                max_length=2048,
            ),
        ),
        migrations.AlterField(
            model_name="quantumuser",
            name="kyber_public_key",
            field=models.BinaryField(
                blank=True,
                default=b"",
                help_text="Legacy Kyber768 public key (preserved for backward compatibility)",
                max_length=2048,
            ),
        ),
        migrations.CreateModel(
            name="BB84Session",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending - Waiting for receiver acceptance"),
                            ("active", "Active - Key exchange in progress"),
                            ("sifting", "Sifting - Reconciling measurement bases"),
                            ("completed", "Completed - Shared key established"),
                            (
                                "failed",
                                "Failed - Eavesdropping detected or error threshold exceeded",
                            ),
                            ("aborted", "Aborted - Session cancelled by user"),
                            ("expired", "Expired - Session timeout"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "sender_bits",
                    models.JSONField(
                        blank=True,
                        help_text="Sender's random bit sequence for quantum state preparation",
                        null=True,
                    ),
                ),
                (
                    "sender_bases",
                    models.JSONField(
                        blank=True,
                        help_text="Sender's basis choices ('+' rectilinear, 'Ã—' diagonal)",
                        null=True,
                    ),
                ),
                (
                    "receiver_bases",
                    models.JSONField(
                        blank=True,
                        help_text="Receiver's measurement basis choices",
                        null=True,
                    ),
                ),
                (
                    "receiver_measurements",
                    models.JSONField(
                        blank=True,
                        help_text="Receiver's measurement results",
                        null=True,
                    ),
                ),
                (
                    "matched_indices",
                    models.JSONField(
                        blank=True,
                        help_text="Indices where sender and receiver bases matched",
                        null=True,
                    ),
                ),
                (
                    "sifted_key_length",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of bits after basis sifting",
                        null=True,
                    ),
                ),
                (
                    "error_rate",
                    models.FloatField(
                        blank=True,
                        help_text="Quantum Bit Error Rate (QBER) from sample comparison",
                        null=True,
                    ),
                ),
                (
                    "sampled_indices",
                    models.JSONField(
                        blank=True,
                        help_text="Indices used for error rate estimation",
                        null=True,
                    ),
                ),
                (
                    "shared_key",
                    models.BinaryField(
                        blank=True,
                        help_text="Final 256-bit shared secret for AES key wrapping",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "eavesdropper_present",
                    models.BooleanField(
                        default=False,
                        help_text="Simulate eavesdropper (Eve) for demonstration purposes",
                    ),
                ),
                (
                    "eavesdrop_probability",
                    models.FloatField(
                        default=0.0,
                        help_text="Probability of Eve intercepting each qubit (0.0 to 1.0)",
                    ),
                ),
                (
                    "num_intercepted",
                    models.IntegerField(
                        default=0,
                        help_text="Number of qubits intercepted by simulated eavesdropper",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Session expiration time (15 minutes from creation)",
                        null=True,
                    ),
                ),
                (
                    "file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bb84_sessions",
                        to="core.encryptedfile",
                    ),
                ),
                (
                    "receiver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bb84_sessions_as_receiver",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bb84_sessions_as_sender",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "bb84_sessions",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["sender", "receiver", "status"],
                        name="bb84_sessio_sender__d6e27d_idx",
                    ),
                    models.Index(
                        fields=["session_id"], name="bb84_sessio_session_3996bb_idx"
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="bb84_sessio_status_708690_idx",
                    ),
                ],
            },
        ),
    ]
